{
	"info": {
		"_postman_id": "41a3046d-4e83-459b-93a5-b2b57c9e3c61",
		"name": "API Market Data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33903296"
	},
	"item": [
		{
			"name": "Create Market Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							" pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"companyID_env\", jsonData.id);\r",
							"pm.environment.set(\"stockPrice_env\", jsonData.price);\r",
							"pm.environment.set(\"shares_env\", jsonData.shares);\r",
							"pm.environment.set(\"ratioPE_env\", jsonData[\"P/E\"]);\r",
							"pm.environment.set(\"beta_env\", jsonData.beta);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"BAC\",\r\n    \"price\": 36.97,\r\n    \"marketCap\": 290838456123,\r\n    \"shares\": 7875234123,\r\n    \"volume\": 50411086,\r\n    \"avg_volume\": 40854632,\r\n    \"P/E\": 12.75,\r\n    \"beta\": 1.39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/marketData",
					"host": [
						"{{url}}"
					],
					"path": [
						"marketData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all market data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							" pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"const jsonData = JSON.parse(responseBody);\r",
							"\r",
							"function getVolumeFilter(base) {\r",
							"    const factor = base === \"avg_volume\" ? 1 : 0.1;\r",
							"    return jsonData.filter(company => company.volume/company[base] >= factor);\r",
							"}\r",
							"\r",
							"const betaGT1 = jsonData.filter(company => company.beta > 1);\r",
							"const volToShares = getVolumeFilter(\"shares\");\r",
							"const volToAvgVol = getVolumeFilter(\"avg_volume\");\r",
							"const chID = jsonData.filter(company => [\"META\", \"AMZN\", \"CGC\"].some(symbol => symbol === company.id));\r",
							"\r",
							"pm.test(\"There are 9 or more companies in the response\", () => {\r",
							"    pm.expect(jsonData.length).to.be.at.least(9);\r",
							"})\r",
							"\r",
							"pm.test(\"There are 5 or more companies with beta greater than 1\", () => {\r",
							"    pm.expect(betaGT1.length).to.be.at.least(5);\r",
							"})\r",
							"\r",
							"pm.test(\"There are 1 or more companies with volume representing 10% of shares outstanding\", () => {\r",
							"    pm.expect(volToShares.length).to.be.at.least(1);\r",
							"})\r",
							"\r",
							"pm.test(\"There are 3 or more companies with volume greater than average volume\", () => {\r",
							"    pm.expect(volToAvgVol.length).to.be.at.least(3);\r",
							"})\r",
							"\r",
							"pm.test(\"Response body includes Meta Platforms, Amazon or Canopy Growth Corporation\", () => {\r",
							"    pm.expect(chID.length).to.be.above(0);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/marketData",
					"host": [
						"{{url}}"
					],
					"path": [
						"marketData"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Company Market Data by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"check if company ID present in the response body\", () => {\r",
							"   const jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.id).to.eql(pm.environment.get(\"companyID_env\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"const jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							" pm.expect(jsonData).to.be.an(\"object\");\r",
							" Object.entries(jsonData).forEach(prop => {\r",
							"    pm.expect(jsonData[prop[0]]).to.be.a(prop[0] === \"id\" ? \"string\" : \"number\");\r",
							" })\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							"    \r",
							"        pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"   \r",
							"});\r",
							"\r",
							"pm.test(\"Market capitalization is above USD 1T\", () => {\r",
							"    try {\r",
							"        pm.expect(jsonData.marketCap).to.be.above(200000000000);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(\"Market capitalization was below USD 1T\")\r",
							"    }\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Company is not as twice riskier than market\", () => {\r",
							"    try {\r",
							"        pm.expect(jsonData.beta).to.be.below(2);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(`Beta of ${jsonData.beta} was more than twice riskier than market`)\r",
							"    }\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"P/E Ratio is lesser than 20x\", () => {\r",
							"    try {\r",
							"      pm.expect(jsonData[\"P/E\"]).to.be.below(20);\r",
							"    } catch(err) {\r",
							"      pm.expect.fail(`P/E ratio of ${jsonData[\"P/E\"]}x was higher than 20 and not acceptable`)\r",
							"\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"There is a high volume activity in the last 24 hours\", () => {\r",
							"    try {\r",
							"        pm.expect(jsonData.volume/jsonData.avg_volume).to.be.above(2);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(\"There was no high volume activity in the last 24 hours\");\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"Last 24 hours volume represents at least 5% of shares outstanding\", () => {\r",
							"    try {\r",
							"     pm.expect(jsonData.volume/jsonData.shares).to.be.above(0.05);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(\"Last 24 hours volume represents less than 5% of total shares\");\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/marketData/{{companyID_env}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"marketData",
						"{{companyID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Market Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const mvGrowth = 0.089;\r",
							"const sharesGrowth = -0.032;\r",
							"const volChange = -0.24;\r",
							"const avgVolChange = -0.32;\r",
							"const newPE = 14.72;\r",
							"const newBeta = 1.31;\r",
							"\r",
							"pm.collectionVariables.set(\"newPrice\", pm.environment.get(\"stockPrice_env\") * (1 + mvGrowth));\r",
							"pm.collectionVariables.set(\"newMC\", pm.environment.get(\"marketCap_env\") * (1 + mvGrowth));\r",
							"pm.collectionVariables.set(\"newShares\", pm.environment.get(\"shares_env\") * (1 + sharesGrowth));\r",
							"pm.collectionVariables.set(\"newPE\", 14.72);\r",
							"pm.collectionVariables.set(\"newBeta\", 1.31);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							" pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"const jsonData = JSON.parse(responseBody);\r",
							"const priceMovement = jsonData.price/getPrevious(\"stockPrice_env\") - 1;\r",
							"const sharesMovement = jsonData.shares/getPrevious(\"shares_env\") - 1;\r",
							"const betaMovement = jsonData.beta - getPrevious(\"beta_env\");\r",
							"\r",
							"function formatPercentage(num) {\r",
							"    return num.toFixed(2)*100\r",
							"}\r",
							"\r",
							"function getPrevious(variable) {\r",
							"    return pm.environment.get(variable);\r",
							"}\r",
							"\r",
							"pm.test(`Stock price movement of ${formatPercentage(priceMovement)}% was positive`, () => {\r",
							"    try {\r",
							"     pm.expect(priceMovement).to.be.above(0);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(`Stock price declined by ${formatPercentage(priceMovement)}%`)\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`Company repurchased shares and reduced number of shares outstanding by ${formatPercentage(sharesMovement)}%`, () => {\r",
							"    try {\r",
							"     pm.expect(sharesMovement).to.be.below(0);\r",
							"    } catch(err) {\r",
							"        pm.expect.fail(`Company issued more shares and its number increased by ${formatPercentage(sharesMovement)}%`)\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Company became less risky\", () => {\r",
							"    try {\r",
							"        pm.expect(betaMovement).to.be.below(0);\r",
							"    } catch (err) {\r",
							"        pm.expect.fail(\"Company actually became riskier\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"BAC\",\r\n    \"price\": {{newPrice}},\r\n    \"marketCap\": {{newMC}},\r\n    \"shares\": {{newShares}},\r\n    \"volume\": 38411086,\r\n    \"avg_volume\": 29854632,\r\n    \"P/E\": {{newPE}},\r\n    \"beta\": {{newBeta}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/marketData/{{companyID_env}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"marketData",
						"{{companyID_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Market Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", () => {\r",
							" pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.environment.unset(\"companyID_env\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/marketData/{{companyID_env}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"marketData",
						"{{companyID_env}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "newPrice",
			"value": ""
		},
		{
			"key": "newMC",
			"value": ""
		},
		{
			"key": "newShares",
			"value": ""
		},
		{
			"key": "newPE",
			"value": ""
		},
		{
			"key": "newBeta",
			"value": ""
		}
	]
}